---
# This role will assume you have CloudPak for Data v3.5 installed in 'cpd-meta-ops' namespace
# and will perform an in-place upgrade to CloudPak for Data v4.0 where the CPD operators will be
# deployed in 'ibm-common-services' namespace and the services will be deployed in existing 'cpd-meta-ops' namespace

# 1. Fail if no required keys are provided
# -----------------------------------------------------------------------------
- name: "Fail if cpd_primary_storage_class has not been provided"
  assert:
    that: cpd_primary_storage_class is defined and cpd_primary_storage_class != ""
    fail_msg: "cpd_primary_storage_class property has not been set"

- name: "Debug information"
  debug:
    msg:
      - "CPD meta namespace ........... {{ cpd_meta_namespace }}"
      - "CPD services namespace ....... {{ cpd_services_namespace }}"
      - "CPD registry ................. {{ cpd_registry }}"
      - "CPD username ................. {{ cpd_registry_user }}"
      - "CPD storage class ............ {{ cpd_primary_storage_class }}"
      # - "CPD metadb block storage class ......... {{ cpd_metadata_storage_class }}"

# -----------------------------------------------------------------------------
# 2. Upgrade CP4D operator
# -----------------------------------------------------------------------------
# If ibm-common-services is already installed
- name: "Check if ibm-common-services operator is installed already"
  kubernetes.core.k8s_info:
    api_version: apps/v1
    name: ibm-common-service-operator
    namespace: ibm-common-services
    kind: Deployment
  register: _cs_deployment

# If ibm-common-services is not installed yet, add operator group for cpd
- name: "Apply operator group"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/cpd/operatorgroup.yml') }}"
  when: _cs_deployment.resources[0] is not defined

# If ibm-common-services is not installed yet, add namespace scope operator for cpd
- name: "Install namespace scope subscription"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/cpd/namespacescope.yml') }}"
  when: _cs_deployment.resources[0] is not defined

- name: "Wait for namespace scope operator to be ready (60s delay)"
  when: _cs_deployment.resources[0] is not defined
  kubernetes.core.k8s_info:
    api_version: apps/v1
    name: ibm-namespace-scope-operator
    namespace: "{{ cpd_meta_namespace }}"
    kind: Deployment
  register: _ns_subscription
  until: _ns_subscription.resources[0].status.availableReplicas is defined
  retries: 10 # Approximately 10 minutes before we give up
  delay: 60 # 1 minute

# Apply namespace scope resource so cpd v4 operator can watch existing cpd installation namespace
- name: "Apply namespace scope"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/cpd/namespacescope.yml') }}"

# Apply cpd v4 operator subscription
- name: "Install CPD 4.0 Subscription"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/cpd/subscription-cpd-operator.yml') }}"
  register: _cpd_subscription_result

# Wait cpd v4 operator to be ready
- name: "Wait for cpd-platform-operator-manager to be ready (60s delay)"
  kubernetes.core.k8s_info:
    api_version: apps/v1
    name: cpd-platform-operator-manager
    namespace: "{{ cpd_meta_namespace }}"
    kind: Deployment
  register: _cpd_subscription
  until: _cpd_subscription.resources[0].status.availableReplicas is defined
  retries: 10 # Approximately 10 minutes before we give up
  delay: 60 # 1 minute

# Wait operand-deployment-lifecycle-manager operator to be ready
- name: "Wait for operand-deployment-lifecycle-manager to be ready (60s delay)"
  kubernetes.core.k8s_info:
    api_version: apps/v1
    name: operand-deployment-lifecycle-manager
    namespace: "{{ cpd_meta_namespace }}"
    kind: Deployment
  register: _operand_subscription
  until: _operand_subscription.resources[0].status.availableReplicas is defined
  retries: 10 # Approximately 10 minutes before we give up
  delay: 60 # 1 minute

# Apply cpd v4 CR
- name: "Apply CloudPak for Data v4.0 CR"
  kubernetes.core.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/cpd/ibmcpd.yml') }}"
  register: _cpd_ibmcdp_result

# Wait ibm-zen-operator to be ready
# this operator will process cpd v4 installation/upgrade
- name: "Wait for ibm-zen-operator to be ready (60s delay)"
  kubernetes.core.k8s_info:
    api_version: apps/v1
    name: ibm-zen-operator
    namespace: "{{ cpd_meta_namespace }}"
    kind: Deployment
  register: _zen_deployment
  until: _zen_deployment.resources[0].status.availableReplicas is defined
  retries: 90 # Approximately 10 minutes before we give up
  delay: 60 # 1 minute

# Wait ZenService lite-cr to be deployed
- name: "Wait ZenService lite-cr to be deployed"
  kubernetes.core.k8s_info:
    api_version: zen.cpd.ibm.com/v1
    name: lite-cr
    namespace: "{{ cpd_services_namespace }}"
    kind: ZenService
  register: zenlitecr_output
  until:
    - zenlitecr_output.resources is defined
    - zenlitecr_output.resources | length > 0
  retries: 60 # approx 60 minutes before we give up
  delay: 60 # 1 minute

# Patch ZenService lite-cr to scaleConfig: medium - this is a recommendation from cpd team
- name: "Patch ZenService lite-cr to scaleConfig: medium"
  kubernetes.core.k8s:
    api_version: zen.cpd.ibm.com/v1
    name: lite-cr
    namespace: "{{ cpd_services_namespace }}"
    kind: ZenService
    definition:
      spec:
        scaleConfig: medium
        ZenCoreMetaDb:
          name: zen-metastoredb
          kind: StatefulSet
          container: zen-metastoredb
          replicas: 3
          resources:
            limits:
              cpu: 2
              memory: 4Gi
            requests:
              cpu: 200m
              memory: 1024Mi
    apply: true
  register: zenlitecr_update

# Wait cpd v4 CR to reconcile
- name: "Wait for CloudPak for Data v4.0 CR to have status 'Completed'"
  kubernetes.core.k8s_info:
    api_version: cpd.ibm.com/v1
    name: ibmcpd-cr
    namespace: "{{ cpd_services_namespace }}"
    kind: Ibmcpd
  register: _ibmcpd_subscription
  until: _ibmcpd_subscription.resources[0].status.controlPlaneStatus == "Completed"
  retries: 90 # Approximately 10 minutes before we give up
  delay: 60 # 1 minute

# Wait cpd v4 CR to reconcile
- name: "Wait for ZenService CR to have status 'Completed'"
  kubernetes.core.k8s_info:
    api_version: zen.cpd.ibm.com/v1
    name: lite-cr
    namespace: "{{ cpd_services_namespace }}"
    kind: ZenService
  register: _zen_subscription
  until:
    - _zen_subscription.resources[0].status is defined
    - _zen_subscription.resources[0].status.zenStatus == "Completed"
  retries: 90 # Approximately 10 minutes before we give up
  delay: 60 # 1 minute

# 3. Provide CP4D v4 Dashboard URL (this will be same CPD url from existing v3.5)
# ------------------------------------------------------------------------------
- name: "Retrieve admin credentials"
  kubernetes.core.k8s_info:
    api_version: v1
    name: admin-user-details
    namespace: "{{ cpd_services_namespace }}"
    kind: Secret
  register: _cpd_admin

- name: "Obtain CP4D dashboard URL"
  debug:
    msg:
      - "CP4D Dashboard ................. https://{{_zen_subscription.resources[0].status.url}}"
      - "CP4D Username .................. admin"
      - "CP4D Password .................. Found in 'admin-user-details' secret under '{{ cpd_services_namespace }}' namespace"
