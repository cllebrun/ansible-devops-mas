---
# This role will assume you have CloudPak for Data v3.5 installed in 'cpd-meta-ops' namespace
# and will perform an in-place upgrade to CloudPak for Data v4.0 where the CPD operators will be
# deployed in 'ibm-common-services' namespace and the services will be deployed in existing 'cpd-meta-ops' namespace

# 1. Check which CP4D Services to be upgraded
# -----------------------------------------------------------------------------
- name: "Lookup for existing CPD v3.5 Services"
  kubernetes.core.k8s_info:
    api_version: metaoperator.cpd.ibm.com/v1
    namespace: "{{cpd_services_namespace}}"
    kind: CPDService
  register: _cpd_services_to_upgrade

- set_fact:
    cpd35_services: "{{ cpd35_services|default([]) + [outer_item.spec.serviceName] }}"
  loop: "{{ _cpd_services_to_upgrade.resources }}"
  loop_control:
    loop_var: outer_item
    label: "CPD service {{ outer_item.spec.serviceName }} is currently installed on CPD v3.5"

- name: "Check if existing CPD v3.5 Services have supported upgrade path"
  when: cpd_item in cpd_upgrade_supported_services
  set_fact:
    cpd_services: "{{ cpd_services|default([]) + [cpd_item] }}"
  loop: "{{ cpd35_services }}"
  loop_control:
    loop_var: cpd_item

# 2. Define the priority that CPD Services will be upgraded
# -----------------------------------------------------------------------------
# DB2 and Watson Studio must be upgraded first, once Watson Studio is upgraded then
# remaining Watson Services can be upgraded
# Lastly, OpenScale will be upgraded as it is likely to fail if WML is not priorly upgraded.
# That's the best we can do for now to try to control the order of what gets upgraded first
# so everything works out at the end... it would be too complex to upgrade
# a given service conditionally upon a chain of services being upgraded priorly.


# WSL/CCS might face some issues while upgrading, here's list of known issues in cpd:
# https://www.ibm.com/docs/en/cloud-paks/cp-data/4.0?topic=overview-limitations-known-issues#known-issues__install
- name: "Check CPD Services with 1st priority to be upgraded (DB2 and Watson Studio)"
  when: cpd_item_priority1 in cpd_services_list_priority1
  set_fact:
    cpd_services_priority1: "{{ cpd_services_priority1|default([]) + [cpd_item_priority1] }}"
  loop: "{{ cpd_services }}"
  loop_control:
    loop_var: cpd_item_priority1

- name: "Check CPD Services with 2nd priority to be upgraded (WML, Spark, Dods and Dmc)"
  when: cpd_item_priority2 in cpd_services_list_priority2
  set_fact:
    cpd_services_priority2: "{{ cpd_services_priority2|default([]) + [cpd_item_priority2] }}"
  loop: "{{ cpd_services }}"
  loop_control:
    loop_var: cpd_item_priority2

- name: "Check CPD Services with 3rd priority to be upgraded (OpenScale)"
  when: cpd_item_priority3 in cpd_services_list_priority3
  set_fact:
    cpd_services_priority3: "{{ cpd_services_priority3|default([]) + [cpd_item_priority3] }}"
  loop: "{{ cpd_services }}"
  loop_control:
    loop_var: cpd_item_priority3

# 3. Fail if the required parameters have not been provided
# -----------------------------------------------------------------------------
- name: "Assert that cpd_primary_storage_class has been provided"
  assert:
    that:
      - cpd_primary_storage_class is defined and cpd_primary_storage_class != ""
    fail_msg: "cpd_primary_storage_class property has not been set"

- name: "Debug information"
  debug:
    msg:
      - "CPD Namespace ................... {{ cpd_meta_namespace }}"
      - "CPD Services Namespace .......... {{ cpd_services_namespace }}"
      - "CPD storage class ............... {{ cpd_primary_storage_class }}"
      - "CPD block storage class ......... {{ cpd_block_storage_class | default('<undefined>', True) }}"
      - "CPD services to be upgraded .... {{ cpd_services }}"

# 4. Upgrade DB2 and Watson Studio
# -----------------------------------------------------------------------------
- include_tasks: "{{ role_path }}/tasks/cpd_upgrade/upgrade_services_by_priority.yml"
  when:
    - cpd_services_priority1 is defined
    - cpd_services_priority1 | length > 0
  vars:
    cpd_services: "{{ cpd_services_priority1 }}"

# 5. Upgrade other Watson Services
# -----------------------------------------------------------------------------
- include_tasks: "{{ role_path }}/tasks/cpd_upgrade/upgrade_services_by_priority.yml"
  when:
    - cpd_services_priority2 is defined
    - cpd_services_priority2 | length > 0
  vars:
    cpd_services: "{{ cpd_services_priority2 }}"

# 6. Upgrade OpenScale
# -----------------------------------------------------------------------------
- include_tasks: "{{ role_path }}/tasks/cpd_upgrade/upgrade_services_by_priority.yml"
  when:
    - cpd_services_priority3 is defined
    - cpd_services_priority3 | length > 0
  vars:
    cpd_services: "{{ cpd_services_priority3 }}"

# 7. Provide CP4D dashboard URL
# -----------------------------------------------------------------------------
- name: "Lookup CP4D dashboard URL"
  kubernetes.core.k8s_info:
    api_version: route.openshift.io/v1
    name: "{{ cpd_services_namespace }}-cpd" # for a clean install of cpd v4, this route is just named 'cpd'
    namespace: "{{cpd_services_namespace}}"
    kind: Route
  register: _cpd_route

- name: "Obtain CP4D dashboard URL"
  debug:
    msg:
      - "CP4D Dashboard ..................... https://{{_cpd_route.resources[0].spec.host}}"
      - "CP4D Username ...................... admin"
      - "CP4D Password ...................... Found in 'admin-user-details' secret under '{{ cpd_meta_namespace }}' namespace"
      - "CP4D Services upgraded to v4.0 ..... {{ cpd_services }}"
