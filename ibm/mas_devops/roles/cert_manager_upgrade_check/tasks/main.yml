---
# This role will perform the following:
# Update the existing MAS 8.6 install to configure the suite to use cert-manager in the new namespace
# Verify the existing MAS 8.6 install is happy with the cert-manager switch over
# Delete the original certificates, secrets, and issuers from the cert-manager namespace

# 1. Set facts and debug
# -------------------------------------------------------------------------------------------------
# ibm-common-services is the default namespace for cert-manager since MAS 8.7
# Check settings.certManager.namespace
- set_fact:
    cert_manager_namespace: "{{ suite_info.resources[0].spec.certManagerNamespace | default('cert-manager', True) }}"
    public_ca_issuer_name: "{{ mas_namespace }}-public-ca-issuer"
    public_issuer_name: "{{ suite_info.resources[0].status['cert-manager'].external.name }}"
    internal_issuer_name: "{{ suite_info.resources[0].status['cert-manager'].internal.name }}"

- name: General Debug
  debug:
    msg:
      - "Instance ID ................ {{ mas_instance_id }}"
      - "MAS namespace .............. {{ mas_namespace }}"
      - "MAS Custom Cluster Issuer .. {{ custom_cluster_issuer }}"
      - "Cert-Manager namespace ..... {{ cert_manager_namespace }}"
      - "Common services namespace .. {{ common_services_namespace }}"
      - "Public CA Issuer ........... {{ public_ca_issuer_name }}"
      - "Public Issuer .............. {{ public_issuer_name }}"
      - "Internal Issuer ............ {{ internal_issuer_name }}"

# 8. Patch MAS 8.6 Suite CR to add spec.certManagerNamespace: ibm-common-services
# -------------------------------------------------------------------------------------------------
- name: "Patch MAS 8.6 Suite CR to add 'spec.certManagerNamespace': '{{ common_services_namespace }}'"
  kubernetes.core.k8s:
    definition:
      apiVersion: core.mas.ibm.com/v1
      kind: Suite
      metadata:
        name: '{{ mas_instance_id }}'
        namespace: '{{ mas_namespace }}'
      spec:
        certManagerNamespace: '{{ common_services_namespace }}'

# 8.1 Verify MAS 8.6 install is happy with the new cert-manager
# -------------------------------------------------------------------------------------------------
- name: "Wait for Suite CR to reconcile after 'spec.certManagerNamespace' replaced to 'ibm-common-services' (60s delay)"
  kubernetes.core.k8s_info:
    api_version: v1
    name: "{{mas_instance_id}}"
    namespace: "{{mas_namespace}}"
    kind: Suite
  register: suite_cr_result
  until:
    - suite_cr_result.resources is defined
    - suite_cr_result.resources | json_query('[*].status.conditions[?type==`Running`][].reason') | select ('match','Successful') | list | length == 1
    - suite_cr_result.resources | json_query('[*].status.conditions[?type==`Failure`][].status') | select ('match','False') | list | length == 1
    - suite_cr_result.resources | json_query('[*].status.conditions[?type==`Ready`][].reason') | select ('match','Ready') | list | length == 1
  retries: 30 # approx 30 minutes before we give up
  delay: 60 # 1 minute

# 9. Verify new cert manager recreates its managed resources if needed after the migration as expected
# -------------------------------------------------------------------------------------------------
# 9.1 Delete any cert-internal secret and check if it's recreated
# -------------------------------------------------------------------------------------------------
- name: "Lookup original {{mas_instance_id}}-internalapi-cert-internal secret"
  kubernetes.core.k8s_info:
    api_version: v1
    name: "{{ mas_instance_id }}-internalapi-cert-internal"
    namespace: "{{ mas_namespace }}"
    kind: Secret
  register: internalapi_original_secret_result
  failed_when: internalapi_original_secret_result.resources[0] | length == 0

- name: "Delete original {{mas_instance_id}}-internalapi-cert-internal secret"
  kubernetes.core.k8s:
    state: absent
    api_version: v1
    kind: Secret
    name: "{{ mas_instance_id }}-internalapi-cert-internal"
    namespace: "{{ mas_namespace }}"

- name: "Wait for {{ mas_instance_id }}-internalapi-cert-internal secret to be recreated (60s delay)"
  kubernetes.core.k8s_info:
    api_version: v1
    name: "{{ mas_instance_id }}-internalapi-cert-internal"
    namespace: "{{ mas_namespace }}"
    kind: Secret
  register: internalapi_new_secret_result
  until:
    - internalapi_new_secret_result.resources[0] is defined
    - internalapi_new_secret_result.resources[0] | length > 0
  retries: 15 # approx 15 minutes before we give up
  delay: 60 # 1 minute

- name: "Assert original 'ca.crt' in {{ mas_instance_id }}-internalapi-cert-internal secret matches with the new one recreated"
  assert:
    that:
      - internalapi_original_secret_result.resources[0].data['ca.crt'] == internalapi_new_secret_result.resources[0].data['ca.crt']
      - internalapi_new_secret_result.resources[0].data | length == 3 # mas instances must have ca.crt, tls.crt and tls.key
    fail_msg: "Assertion Failed! Original {{ mas_instance_id }}-internalapi-cert-internal secret does not match with the recreated one."
    success_msg: "Assertion Passed! Original 'ca.crt' in {{ mas_instance_id }}-internalapi-cert-internal secret matches with the new one recreated!"

# 9.2 Delete MAS cert-public secret and check if it's recreated
# -------------------------------------------------------------------------------------------------
- name: "Lookup original {{mas_instance_id}}-cert-public secret"
  kubernetes.core.k8s_info:
    api_version: v1
    name: "{{ mas_instance_id }}-cert-public"
    namespace: "{{ mas_namespace }}"
    kind: Secret
  register: publiccert_original_secret_result
  failed_when: publiccert_original_secret_result.resources[0] | length == 0

- name: "Delete original {{mas_instance_id}}-cert-public secret"
  kubernetes.core.k8s:
    state: absent
    api_version: v1
    kind: Secret
    name: "{{mas_instance_id}}-cert-public"
    namespace: "{{ mas_namespace }}"

- name: "Wait for {{mas_instance_id}}-cert-public secret to be recreated (60s delay)"
  kubernetes.core.k8s_info:
    api_version: v1
    name: "{{mas_instance_id}}-cert-public"
    namespace: "{{ mas_namespace }}"
    kind: Secret
  register: publiccert_new_secret_result
  until:
    - publiccert_new_secret_result.resources[0] is defined
    - publiccert_new_secret_result.resources[0] | length > 0
  retries: 15 # approx 15 minutes before we give up
  delay: 60 # 1 minute

# Self-signed MAS instances must have ca.crt, tls.crt and tls.key in {{mas_instance_id}}-cert-public secret
- name: "Assert {{mas_instance_id}}-cert-public secret has been recreated and contains the expected content (Selfsigned instance)"
  when:
    - custom_cluster_issuer is not defined or custom_cluster_issuer == ''
  assert:
    that:
      - publiccert_new_secret_result.resources[0].data is defined
      - publiccert_new_secret_result.resources[0].data['ca.crt'] is defined
      - publiccert_new_secret_result.resources[0].data['tls.crt'] is defined
      - publiccert_new_secret_result.resources[0].data['tls.key'] is defined
    fail_msg: "Assertion Failed! {{mas_instance_id}}-cert-public secret was not recreated with expected properties."
    success_msg: "Assertion Passed! {{mas_instance_id}}-cert-public secret was recreated with expected properties 'ca.crt', 'tls.crt', 'tls.key'!"

# Or, if it's a Let's encrypt type of MAS instances, it must have tls.crt and tls.key only in {{mas_instance_id}}-cert-public secret
- name: "Assert {{mas_instance_id}}-cert-public secret has been recreated and contains the expected content (Selfsigned instance)"
  when:
    - custom_cluster_issuer is defined
    - custom_cluster_issuer | length > 0
  assert:
    that:
      - publiccert_new_secret_result.resources[0].data is defined
      - publiccert_new_secret_result.resources[0].data['tls.crt'] is defined
      - publiccert_new_secret_result.resources[0].data['tls.key'] is defined
    fail_msg: "Assertion Failed! {{mas_instance_id}}-cert-public secret was not recreated with expected properties."
    success_msg: "Assertion Passed! {{mas_instance_id}}-cert-public secret was recreated with expected properties 'tls.crt' and 'tls.key'!"

# 9.3 Verify MAS 8.6 install is still happy with recreation of the cert-public secret
# since {{mas_instance_id}}-cert-public secret is recreated, it will reapply the new secret cross MAS instance
# -------------------------------------------------------------------------------------------------
- name: "Wait for Suite CR to reconcile after {{mas_instance_id}}-cert-public secret is recreated (60s delay)"
  kubernetes.core.k8s_info:
    api_version: v1
    name: "{{mas_instance_id}}"
    namespace: "{{mas_namespace}}"
    kind: Suite
  register: suite_cr_result
  until:
    - suite_cr_result.resources is defined
    - suite_cr_result.resources | json_query('[*].status.conditions[?type==`Running`][].reason') | select ('match','Successful') | list | length == 1
    - suite_cr_result.resources | json_query('[*].status.conditions[?type==`Failure`][].status') | select ('match','False') | list | length == 1
    - suite_cr_result.resources | json_query('[*].status.conditions[?type==`Ready`][].reason') | select ('match','Ready') | list | length == 1
  retries: 30 # approx 30 minutes before we give up
  delay: 60 # 1 minute

# 10. Delete the original certificates, issuers, and secrets from the cert-manager namespace
# -------------------------------------------------------------------------------------------------

# 10.1 Delete Default Public CA Issuer resources from cert-manager namespace
# -------------------------------------------------------------------------------------------------
# These resources will only exist if the user didn't provide their own ClusterIssuer
- name: "Public CA Issuer : Delete original {{ mas_namespace }}-public-ca-issuer"
  when:
    - custom_cluster_issuer is not defined or custom_cluster_issuer == ''
    - cert_manager_namespace == 'cert-manager' # this will ensure only delete resources from cert-manager ns
  include_tasks: tasks/delete_issuer.yml
  vars:
    source_issuer_name: "{{ mas_namespace }}-public-ca-issuer"
    source_issuer_secret_name: "{{ cert_names.public_ca }}"

# 10.2. Delete MAS Internal CA Issuer resources from cert-manager namespace
# -------------------------------------------------------------------------------------------------
- name: "Internal CA Issuer : Delete original {{ internal_ca_issuer.name }}"
  when:
    - cert_manager_namespace == 'cert-manager' # this will ensure only delete resources from cert-manager ns
  include_tasks: tasks/delete_issuer.yml
  vars:
    source_issuer_name: "{{ internal_ca_issuer.name }}"
    source_issuer_secret_name: "{{ cert_names.internal_ca }}"

# 10.3. Delete related CIS/Webhook secrets from cert-manager namespace
# -------------------------------------------------------------------------------------------------
- name: "Internal CA Issuer : Delete original {{ internal_ca_issuer.name }}"
  when:
    - cert_manager_namespace == 'cert-manager' # this will ensure only delete resources from cert-manager ns
  include_tasks: tasks/delete_issuer.yml
  vars:
    source_issuer_name: "{{ internal_ca_issuer.name }}"
    source_issuer_secret_name: "{{ cert_names.internal_ca }}"
